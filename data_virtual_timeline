#!/usr/bin/env python3

import datetime
import os
import re
from collections import Counter
from datetime import datetime
from scipy.stats import mode
from datetime import datetime, timedelta


import numpy as np
from keras.preprocessing import sequence

offset = 20
max_lenght = 2000

cookActivities = {"cairo": {"Other": offset,
                            "Work": offset + 1,
                            "Take_medicine": offset + 2,
                            "Sleep": offset + 3,
                            "Leave_Home": offset + 4,
                            "Eat": offset + 5,
                            "Bed_to_toilet": offset + 6,
                            "Bathing": offset + 7,
                            "Enter_home": offset + 8,
                            "Personal_hygiene": offset + 9,
                            "Relax": offset + 10,
                            "Cook": offset + 11},
                  "kyoto7": {"Other": offset,
                             "Work": offset + 1,
                             "Sleep": offset + 2,
                             "Relax": offset + 3,
                             "Personal_hygiene": offset + 4,
                             "Cook": offset + 5,
                             "Bed_to_toilet": offset + 6,
                             "Bathing": offset + 7,
                             "Eat": offset + 8,
                             "Take_medicine": offset + 9,
                             "Enter_home": offset + 10,
                             "Leave_home": offset + 11},
                  "kyoto8": {"Other": offset,
                             "Bathing": offset + 1,
                             "Cook": offset + 2,
                             "Sleep": offset + 3,
                             "Work": offset + 4,
                             "Bed_to_toilet": offset + 5,
                             "Personal_hygiene": offset + 6,
                             "Relax": offset + 7,
                             "Eat": offset + 8,
                             "Take_medicine": offset + 9,
                             "Enter_home": offset + 10,
                             "Leave_home": offset + 11}
    ,
                  "kyoto11": {"Other": offset,
                              "Work": offset + 1,
                              "Sleep": offset + 2,
                              "Relax": offset + 3,
                              "Personal_hygiene": offset + 4,
                              "Leave_Home": offset + 5,
                              "Enter_home": offset + 6,
                              "Eat": offset + 7,
                              "Cook": offset + 8,
                              "Bed_to_toilet": offset + 9,
                              "Bathing": offset + 10,
                              "Take_medicine": offset + 11},
                  "milan": {"Other": offset,
                            "Work": offset + 1,
                            "Take_medicine": offset + 2,
                            "Sleep": offset + 3,
                            "Relax": offset + 4,
                            "Leave_Home": offset + 5,
                            "Eat": offset + 6,
                            "Cook": offset + 7,
                            "Bed_to_toilet": offset + 8,
                            "Bathing": offset + 9,
                            "Enter_home": offset + 10,
                            "Personal_hygiene": offset + 11},
                  }
mappingActivities = {"cairo": {"": "Other",
                               "R1 wake": "Other",
                               "R2 wake": "Other",
                               "Night wandering": "Other",
                               "R1 work in office": "Work",
                               "Laundry": "Work",
                               "R2 take medicine": "Take_medicine",
                               "R1 sleep": "Sleep",
                               "R2 sleep": "Sleep",
                               "Leave home": "Leave_Home",
                               "Breakfast": "Eat",
                               "Dinner": "Eat",
                               "Lunch": "Eat",
                               "Bed to toilet": "Bed_to_toilet"},
                     "kyoto7": {"R1_Bed_to_Toilet": "Bed_to_toilet",
                                "R2_Bed_to_Toilet": "Bed_to_toilet",
                                "Meal_Preparation": "Cook",
                                "R1_Personal_Hygiene": "Personal_hygiene",
                                "R2_Personal_Hygiene": "Personal_hygiene",
                                "Watch_TV": "Relax",
                                "R1_Sleep": "Sleep",
                                "R2_Sleep": "Sleep",
                                "Clean": "Work",
                                "R1_Work": "Work",
                                "R2_Work": "Work",
                                "Study": "Other",
                                "Wash_Bathtub": "Other",
                                "": "Other"},
                     "kyoto8": {"R1_shower": "Bathing",
                                "R2_shower": "Bathing",
                                "Bed_toilet_transition": "Other",
                                "Cooking": "Cook",
                                "R1_sleep": "Sleep",
                                "R2_sleep": "Sleep",
                                "Cleaning": "Work",
                                "R1_work": "Work",
                                "R2_work": "Work",
                                "": "Other",
                                "Grooming": "Other",
                                "R1_wakeup": "Other",
                                "R2_wakeup": "Other"},
                     "kyoto11": {"": "Other",
                                 "R1_Wandering_in_room": "Other",
                                 "R2_Wandering_in_room": "Other",
                                 "R1_Work": "Work",
                                 "R2_Work": "Work",
                                 "R1_Housekeeping": "Work",
                                 "R1_Sleeping_Not_in_Bed": "Sleep",
                                 "R2_Sleeping_Not_in_Bed": "Sleep",
                                 "R1_Sleep": "Sleep",
                                 "R2_Sleep": "Sleep",
                                 "R1_Watch_TV": "Relax",
                                 "R2_Watch_TV": "Relax",
                                 "R1_Personal_Hygiene": "Personal_hygiene",
                                 "R2_Personal_Hygiene": "Personal_hygiene",
                                 "R1_Leave_Home": "Leave_Home",
                                 "R2_Leave_Home": "Leave_Home",
                                 "R1_Enter_Home": "Enter_home",
                                 "R2_Enter_Home": "Enter_home",
                                 "R1_Eating": "Eat",
                                 "R2_Eating": "Eat",
                                 "R1_Meal_Preparation": "Cook",
                                 "R2_Meal_Preparation": "Cook",
                                 "R1_Bed_Toilet_Transition": "Bed_to_toilet",
                                 "R2_Bed_Toilet_Transition": "Bed_to_toilet",
                                 "R1_Bathing": "Bathing",
                                 "R2_Bathing": "Bathing"},
                     "milan": {"": "Other",
                               "Master_Bedroom_Activity": "Other",
                               "Meditate": "Other",
                               "Chores": "Work",
                               "Desk_Activity": "Work",
                               "Morning_Meds": "Take_medicine",
                               "Eve_Meds": "Take_medicine",
                               "Sleep": "Sleep",
                               "Read": "Relax",
                               "Watch_TV": "Relax",
                               "Leave_Home": "Leave_Home",
                               "Dining_Rm_Activity": "Eat",
                               "Kitchen_Activity": "Cook",
                               "Bed_to_Toilet": "Bed_to_toilet",
                               "Master_Bathroom": "Bathing",
                               "Guest_Bathroom": "Bathing"},
                     }

#datasets = ["./dataset/cairo", "./dataset/kyoto7", "./dataset/kyoto8", "./dataset/kyoto11", "./dataset/milan"]
datasets = ["./dataset/cairo"]

datasetsNames = [i.split('/')[-1] for i in datasets]


def load_dataset(filename, window_size):
    # dataset fields
    timestamps = []
    sensors = []
    values = []
    activities = []
    activity = ''  # current activity
    
    # File reading
    try:
        with open(filename, 'rb') as features:
            database = features.readlines()
            
            for i, line in enumerate(database):
                try:
                    f_info = line.decode().strip().split()  # strip() removes trailing/leading whitespace
                    
                    # Skip empty lines or malformed data
                    if not f_info:
                        continue
                        
                    # Check if sensor type is M, D, or T
                    if len(f_info) >= 3 and f_info[2][0] in ['M', 'D', 'T']:
                        # Handle timestamp formatting
                        timestamp_str = f_info[0] + f_info[1]
                        if '.' not in f_info[1]:
                            timestamp_str = timestamp_str + '.000000'
                            
                        # Parse timestamp
                        current_timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d%H:%M:%S.%f")
                        timestamps.append(current_timestamp)
                            
                        # Add sensor and value data
                        sensors.append(str(np.array(f_info[2])))
                        values.append(str(np.array(f_info[3])))
                        
                        # Handle activity information
                        if len(f_info) == 4:  # No activity
                            activities.append(activity)
                        else:  # Activity exists
                            description = ' '.join(f_info[4:])
                            if 'begin' in description:
                                activity = description.replace('begin', '').strip()
                                activities.append(activity)
                            elif 'end' in description:
                                activities.append(activity)
                                activity = ''
                        
                        # print(f"Timestamp: {current_timestamp}")
                        # print(f"Sensor: {sensor}")
                        # print(f"Value: {value}")
                        # print(f"Activity: {activity}")
                        
                except IndexError as e:
                    print(f"Error processing line {i}: {str(e)}")
                    continue
                except ValueError as e:
                    print(f"Error parsing data in line {i}: {str(e)}")
                    continue
                    
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found")
        return None
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        return None
    features.close()
    
    # dictionaries: assigning keys to values
    temperature = []
    for element in values:
        try:
            temperature.append(float(element))
        except ValueError:
            pass
    sensorsList = sorted(set(sensors))
    dictSensors = {} # sensor indexing
    virtual_buffer = {} # sensor virtual buffer
    for i, sensor in enumerate(sensorsList):
        dictSensors[sensor] = i
        virtual_buffer[sensor] = -1
    activityList = sorted(set(activities))
    dictActivities = {}
    for i, activity in enumerate(activityList):
        dictActivities[activity] = i
    valueList = sorted(set(values))
    dictValues = {}
    for i, v in enumerate(valueList):
        dictValues[v] = i
    dictValues["N/A"] = -1

    print('Segmenting ' + datasetName + ' dataset ...')
    
    # Optimized Periodic segmentation
    timestamps = np.array(timestamps)
    window_length = timedelta(seconds=window_size)
    
    X = []  # Observation sequences
    Y = []  # Activity labels
    
    # Vectorized time difference calculation
    time_diffs = np.diff(timestamps)
    
    # Find window boundaries more efficiently
    window_indices = np.where(time_diffs > window_length)[0] + 1
    window_indices = np.concatenate(([0], window_indices, [len(timestamps)]))
    trigger_count = 0
    for i in range(len(window_indices) - 1):
        start, end = window_indices[i], window_indices[i+1]
        trigger_count += end-start
        # Find last sensor observations
        for j in range(start, end):
            s = sensors[j]
            virtual_buffer[s] = dictValues[values[j]] # values[j] for unencoded values

        # Calculate the most frequent labeled activity in the window
        act, counts = np.unique(activities[start:end], return_counts=True) 
        window_activity = act[np.argmax(counts)]
                
        X.append(list(virtual_buffer.values()))
        Y.append(dictActivities[window_activity]) # window_activity for unencoded values

        triggers_per_window = trigger_count/len(window_indices)

    return X, Y, dictActivities, triggers_per_window, dictSensors


def convertActivities(X, Y, dictActivities, uniActivities, cookActivities):
    Yf = Y.copy()
    Xf = X.copy()
    activities = {}
    for i, y in enumerate(Y):
        convertact = [key for key, value in dictActivities.items() if value == y]
        if len(convertact)== 0:
            convertact = convertact[0]
            activity = uniActivities[convertact]
            Yf[i] = int(cookActivities[activity] - offset)
            activities[activity] = Yf[i]
    return Xf, Yf, activities


if __name__ == '__main__':
    for filename in datasets:
        datasetName = filename.split("/")[-1]
        print('Loading ' + datasetName + ' dataset ...')
        X, Y, dictActivities, w, dictSensors  = load_dataset(filename, window_size=5)
        
        # Encode sensors as numbers from 1-x: 
        # Encode values (on, off, temperature val): sort of already done
        # Encode date? or just sort: not done yet
        print(dictActivities,
                                                 mappingActivities[datasetName],
                                                 cookActivities[datasetName])
        X, Y, dictActivities = convertActivities(X, Y,
                                                 dictActivities,
                                                 mappingActivities[datasetName],
                                                 cookActivities[datasetName])

        print(sorted(dictActivities, key=dictActivities.get))
        print("n° instances post-filtering:\t" + str(len(X)))

        print(Counter(Y))

        X = np.array(X, dtype=object)
        Y = np.array(Y, dtype=object)

        ## X = sequence.pad_sequences(X, maxlen=max_lenght, dtype='int32')
        if not os.path.exists('npy'):
            os.makedirs('npy')

        np.save('./npy/' + datasetName + 'virtual-x.npy', X)
        np.save('./npy/' + datasetName + 'virtual-y.npy', Y)
        np.save('./npy/' + datasetName + 'virtual-labels.npy', dictActivities)

        print("\n\n\nSensor buffer:",  dictSensors)
        
        print("\nTrigger rate per window:" + str(w) + "\n")
        for i in range(200, 400): # Peak
            print(X[i])
            print(Y[i])
            print("\n")



def getData(datasetName):
    X = np.load('./npy/' + datasetName + '-x.npy')
    Y = np.load('./npy/' + datasetName + '-y.npy')
    dictActivities = np.load('./npy/' + datasetName + '-labels.npy').item()
    return X, Y, dictActivities
